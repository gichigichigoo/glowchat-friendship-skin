
export type Message = {
  id: string;
  sender: 'bot' | 'user';
  text: string;
  timestamp: Date;
};

export type QuickReply = {
  id: string;
  text: string;
  emoji: string;
  concern: 'dry' | 'acne' | 'brightening';
};

// Initial greeting message
export const initialGreeting: Message = {
  id: '1',
  sender: 'bot',
  text: 'Xin ch√†o! üíñ H√¥m nay da b·∫°n c·∫£m th·∫•y th·∫ø n√†o n√®?',
  timestamp: new Date(),
};

// Quick reply options
export const quickReplies: QuickReply[] = [
  { 
    id: 'quick-1', 
    text: 'Da m√¨nh b·ªã kh√¥ qu√° tr·ªùi', 
    emoji: 'ü•∫', 
    concern: 'dry' 
  },
  { 
    id: 'quick-2', 
    text: 'N·ªïi m·ª•n nhi·ªÅu gh√™', 
    emoji: 'üò≠', 
    concern: 'acne' 
  },
  { 
    id: 'quick-3', 
    text: 'M√¨nh mu·ªën da s√°ng h∆°n', 
    emoji: '‚ú®', 
    concern: 'brightening' 
  },
];

// Follow-up responses based on concerns
export const concernResponses: Record<string, string[]> = {
  dry: [
    '·ªí! Da kh√¥ c√≥ th·ªÉ do th·ªùi ti·∫øt ho·∫∑c c√°c s·∫£n ph·∫©m b·∫°n ƒëang d√πng ƒë√≥! üí¶ ƒê·ªÉ m√¨nh g·ª£i √Ω m·ªôt v√†i s·∫£n ph·∫©m d∆∞·ª°ng ·∫©m hi·ªáu qu·∫£ nh√©!',
    'Da b·∫°n c·∫ßn ƒë∆∞·ª£c u·ªëng n∆∞·ªõc ngay! üíß M√¨nh c√≥ v√†i s·∫£n ph·∫©m si√™u c·∫•p ·∫©m cho b·∫°n n√†y!'
  ],
  acne: [
    'Hi·ªÉu b·∫°n l·∫Øm! M·ª•n ƒë√∫ng l√† kh√≥ ch·ªãu m√†. üòî ƒê·ªÉ m√¨nh gi·ªõi thi·ªáu m·ªôt v√†i s·∫£n ph·∫©m gi√∫p gi·∫£m m·ª•n v√† l√†m d·ªãu da nh√©!',
    'ƒê·ª´ng lo l·∫Øng nha! M·ª•n l√† chuy·ªán b√¨nh th∆∞·ªùng c·ªßa tu·ªïi teen th√¥i. üåà M√¨nh c√≥ nh·ªØng s·∫£n ph·∫©m gi√∫p c·∫£i thi·ªán t√¨nh tr·∫°ng m·ª•n c·ªßa b·∫°n!'
  ],
  brightening: [
    'Da s√°ng nh∆∞ idol K-pop? üî• M√¨nh hi·ªÉu b·∫°n mu·ªën g√¨ r·ªìi! ƒê√¢y l√† nh·ªØng s·∫£n ph·∫©m gi√∫p l√†m s√°ng da an to√†n v√† hi·ªáu qu·∫£!',
    'M√¨nh c√≥ nh·ªØng s·∫£n ph·∫©m gi√∫p l√†m ƒë·ªÅu m√†u da v√† tƒÉng ƒë·ªô s√°ng cho b·∫°n ƒë√¢y! ‚ú® Nh·ªõ k·∫øt h·ª£p v·ªõi ch·ªëng n·∫Øng m·ªói ng√†y nha!'
  ],
};

// Function to get a random response from the list
export const getRandomResponse = (concern: string): string => {
  const responses = concernResponses[concern];
  if (!responses || responses.length === 0) {
    return 'M√¨nh hi·ªÉu r·ªìi! ƒê·ªÉ m√¨nh g·ª£i √Ω m·ªôt v√†i s·∫£n ph·∫©m ph√π h·ª£p nh√©! üíï';
  }
  
  const randomIndex = Math.floor(Math.random() * responses.length);
  return responses[randomIndex];
};
